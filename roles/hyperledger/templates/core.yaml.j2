###############################################################################
#
#    CLI section
#
###############################################################################
cli:

    # The address that the cli process will use for callbacks from chaincodes
    address: {{core_cli_address}}



###############################################################################
#
#    REST section
#
###############################################################################
rest:

    # Enable/disable setting for the REST service. It is recommended to disable
    # REST service on validators in production deployment and use non-validating
    # nodes to host REST service
    enabled: {{core_rest_enabled}}

    # The address that the REST service will listen on for incoming requests.
    address: {{core_rest_address}}

    validPatterns:

        # Valid enrollment ID pattern in URLs: At least one character long, and
        # all characters are A-Z, a-z, 0-9 or _.
        enrollmentID: {{core_rest_validPatterns_enrollmentID}}

###############################################################################
#
#    LOGGING section
#
###############################################################################
logging:

    # Default logging levels are specified here for each of the three peer
    # commands 'node', 'network' and 'chaincode'. For commands that have
    # subcommands, the defaults also apply to all subcommands of the command.
    # Valid logging levels are case-insensitive strings chosen from

    #     CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG

    # The logging levels specified here can be overridden in various ways,
    # listed below from strongest to weakest:
    #
    # 1. The --logging-level=<level> command line option overrides all other
    #    specifications.
    #
    # 2. The environment variable CORE_LOGGING_LEVEL otherwise applies to
    #    all peer commands if defined as a non-empty string.
    #
    # 3. The environment variables CORE_LOGGING_[NODE|NETWORK|CHAINCODE]
    #    otherwise apply to the respective peer commands if defined as non-empty
    #    strings.
    #
    # 4. Otherwise, the specifications below apply.
    #
    # Developers: Please see fabric/docs/Setup/logging-control.md for more
    # options.
    peer: {{core_logging_peer}}

    node:      {{core_logging_node}}
    network:   {{core_logging_network}}
    chaincode: {{core_logging_chaincode}}
    version: {{core_logging_version}}

###############################################################################
#
#    Peer section
#
###############################################################################
peer:

    # Peer Version following version semantics as described here http://semver.org/
    # The Peer supplies this version in communications with other Peers
    version:  {{core_peer_version}}

    # The Peer id is used for identifying this Peer instance.
    id: {{core_peer_id}}

    # The privateKey to be used by this peer
    # privateKey: {{core_peer_privateKey}}

    # The networkId allows for logical seperation of networks
    # networkId: dev
    # networkId: test
    networkId: {{core_peer_networkId}}

    # The Address this Peer will listen on
    listenAddress: {{core_peer_listenAddress}}
    # The Address this Peer will bind to for providing services
    address: {{core_peer_address}}
    # Whether the Peer should programmatically determine the address to bind to.
    # This case is useful for docker containers.
    addressAutoDetect: {{core_peer_addressAutoDetect}}

    # Setting for runtime.GOMAXPROCS(n). If n < 1, it does not change the current setting
    gomaxprocs: {{core_peer_gomaxprocs}}
    workers: {{core_peer_workers}}

    # Sync related configuration
    sync:
        blocks:
            # Channel size for readonly SyncBlocks messages channel for receiving
            # blocks from oppositie Peer Endpoints.
            # NOTE: currently messages are not stored and forwarded, but rather
            # lost if the channel write blocks.
            channelSize: {{core_peer_sync_blocks_channelSize}}
        state:
            snapshot:
                # Channel size for readonly syncStateSnapshot messages channel
                # for receiving state deltas for snapshot from oppositie Peer Endpoints.
                # NOTE: currently messages are not stored and forwarded, but
                # rather lost if the channel write blocks.
                channelSize: {{core_peer_sync_state_snapshot_channelSize}}
            deltas:
                # Channel size for readonly syncStateDeltas messages channel for
                # receiving state deltas for a syncBlockRange from oppositie
                # Peer Endpoints.
                # NOTE: currently messages are not stored and forwarded,
                # but rather lost if the channel write blocks.
                channelSize: {{core_peer_sync_state_deltas_channelSize}}

    # Validator defines whether this peer is a validating peer or not, and if
    # it is enabled, what consensus plugin to load
    validator:
        enabled: {{core_peer_validator_enabled}}

        consensus:
            # Consensus plugin to use. The value is the name of the plugin, e.g. pbft, noops ( this value is case-insensitive)
            # if the given value is not recognized, we will default to noops
            plugin: {{core_peer_validator_consensus_plugin}}

            # total number of consensus messages which will be buffered per connection before delivery is rejected
            buffersize: {{core_peer_validator_consensus_buffersize}}

        events:
            # The address that the Event service will be enabled on the validator
            address: {{core_peer_validator_events_address}}

            # total number of events that could be buffered without blocking the
            # validator sends
            buffersize: {{core_peer_validator_events_buffersize}}

            # milliseconds timeout for producer to send an event.
            # if < 0, if buffer full, unblocks immediately and not send
            # if 0, if buffer full, will block and guarantee the event will be sent out
            # if > 0, if buffer full, blocks till timeout
            timeout: {{core_peer_validator_events_timeout}}

    # TLS Settings for p2p communications
    tls:
        enabled:  {{core_peer_tls_enabled}}
        cert:
            file: {{core_peer_tls_cert_file}}
        key:
            file: {{core_peer_tls_key_file}}
        # The server name use to verify the hostname returned by TLS handshake
        serverhostoverride: {{core_peer_tls_serverhostoverride}}

    # PKI member services properties
    pki:
        eca:
            paddr: {{core_peer_pki_eca_paddr}}
        tca:
            paddr: {{core_peer_pki_tca_paddr}}
        tlsca:
            paddr: {{core_peer_pki_tlsca_paddr}}
        tls:
            enabled: {{core_peer_pki_tls_enabled}}
            rootcert:
                file: {{core_peer_pki_tls_rootcert_file}}
            # The server name use to verify the hostname returned by TLS handshake
            serverhostoverride: {{core_peer_pki_tls_serverhostoverride}}

    # Peer discovery settings.  Controls how this peer discovers other peers
    discovery:

        # The root nodes are used for bootstrapping purposes, and generally
        # supplied through ENV variables
        # It can be either a single host or a comma separated list of hosts.
        rootnode: {{core_peer_discovery_rootnode}}

        # The duration of time between attempts to asks peers for their connected peers
        period:  {{core_peer_discovery_period}}

        ## leaving this in for example of sub map entry
        # testNodes:
        #    - node   : 1
        #      ip     : 127.0.0.1
        #      port   : 30303
        #    - node   : 2
        #      ip     : 127.0.0.1
        #      port   : 30303

        # Should the discovered nodes and their reputations
        # be stored in DB and persisted between restarts
        persist:    {{core_peer_discovery_persist}}

        # the period in seconds with which the discovery
        # tries to reconnect to successful nodes
        # 0 means the nodes are not reconnected
        touchPeriod: {{core_peer_discovery_touchPeriod}}

        # the maximum nuber of nodes to reconnect to
        # -1 for unlimited
        touchMaxNodes: {{core_peer_discovery_touchMaxNodes}}

    # Path on the file system where peer will store data
    fileSystemPath: {{core_peer_fileSystemPath}}


    profile:
        enabled:     {{core_peer_profile_enabled}}
        listenAddress: {{core_peer_profile_listenAddress}}

###############################################################################
#
#    VM section
#
###############################################################################
vm:

    # Endpoint of the vm management system.  For docker can be one of the following in general
    # unix:///var/run/docker.sock
    # http://localhost:2375
    # https://localhost:2376
    endpoint: {{core_vm_endpoint}}

    # settings for docker vms
    docker:
        tls:
            enabled: {{core_vm_docker_tls_enabled}}
            cert:
                file: {{core_vm_docker_tls_cert_file}}
            ca:
                file: {{core_vm_docker_tls_ca_file}}
            key:
                file: {{core_vm_docker_tls_key_file}}
        # Parameters of docker container creating. For docker can created by custom parameters
        # If you have your own ipam & dns-server for cluster you can use them to create container efficient.
        # NetworkMode Sets the networking mode for the container. Supported standard values are: `host`(default),`bridge`,`ipvlan`,`none`
        # dns A list of DNS servers for the container to use.
        # note: not support customize for `Privileged` `Binds` `Links` `PortBindings`
        # not support set LogConfig using Environment Variables
        # LogConfig sets the logging driver (Type) and related options (Config) for Docker
        # you can refer https://docs.docker.com/engine/admin/logging/overview/ for more detail configruation.
        hostConfig:
            NetworkMode: {{core_vm_docker_hostConfig_NetworkMode}}
            Dns:
               # - 192.168.0.1
            LogConfig:
                Type: {{core_vm_docker_hostConfig_LogConfig_Type}}
                Config:
                    max-size: "{{core_vm_docker_hostConfig_LogConfig_Config_maxsize}}"
                    max-file: "{{core_vm_docker_hostConfig_LogConfig_Config_maxfile}}"
            Memory: {{core_vm_docker_hostConfig_Memory}}
###############################################################################
#
#    Chaincode section
#
###############################################################################
chaincode:

    # The id is used by the Chaincode stub to register the executing Chaincode
    # ID with the Peerand is generally supplied through ENV variables
    # the Path form of ID is provided when deploying the chaincode. The name is
    # used for all other requests. The name is really a hashcode
    # returned by the system in response to the deploy transaction. In
    # development mode where user runs the chaincode, the name can be any string
    id:
        path: {{core_chaincode_id_path}}
        name: {{core_chaincode_id_name}}

    golang:

        # This is the basis for the Golang Dockerfile.  Additional commands will
        # be appended depedendent upon the chaincode specification.
        Dockerfile:  |
            from hyperledger/fabric-baseimage
            #from utxo:0.1.0
            COPY src $GOPATH/src
            WORKDIR $GOPATH

    car:

        # This is the basis for the CAR Dockerfile.  Additional commands will
        # be appended depedendent upon the chaincode specification.
        Dockerfile:  |
            FROM hyperledger/fabric-ccenv
    java:
        # This is the same bases image used for golang implementation
        # TODO Consider moving java installation from common provision shell script to here
        Dockerfile:  |
            from hyperledger/fabric-baseimage

    # timeout in millisecs for starting up a container and waiting for Register
    # to come through. 1sec should be plenty for chaincode unit tests
    startuptimeout: {{core_chaincode_startuptimeout}}

    #timeout in millisecs for deploying chaincode from a remote repository.
    deploytimeout: {{core_chaincode_deploytimeout}}

    #mode - options are "dev", "net"
    #dev - in dev mode, user runs the chaincode after starting validator from
    # command line on local machine
    #net - in net mode validator will run chaincode in a docker container

    mode: {{core_chaincode_mode}}
    # typically installpath should not be modified. Otherwise, user must ensure
    # the chaincode executable is placed in the path specifed by installpath in
    # the image
    installpath: {{core_chaincode_installpath}}

    # keepalive in seconds. In situations where the communiction goes through a
    # proxy that does not support keep-alive, this parameter will maintain connection
    # between peer and chaincode.
    # A value <= 0 turns keepalive off
    keepalive: {{core_chaincode_keepalive}}

###############################################################################
#
###############################################################################
#
#    Ledger section - ledger configuration encompases both the blockchain
#    and the state
#
###############################################################################
ledger:

  blockchain:

    # Define the genesis block
    genesisBlock: {{core_ledger_blockchain_genesisBlock}}

  state:

    # Control the number state deltas that are maintained. This takes additional
    # disk space, but allow the state to be rolled backwards and forwards
    # without the need to replay transactions.
    deltaHistorySize: {{core_ledger_state_deltaHistorySize}}

    # The data structure in which the state will be stored. Different data
    # structures may offer different performance characteristics.
    # Options are 'buckettree', 'trie' and 'raw'.
    # ( Note:'raw' is experimental and incomplete. )
    # If not set, the default data structure is the 'buckettree'.
    # This CANNOT be changed after the DB has been created.
    dataStructure:
      # The name of the data structure is for storing the state
      name: {{core_ledger_state_dataStructure_name}}
      # The data structure specific configurations
      configs:
        # configurations for 'bucketree'. These CANNOT be changed after the DB
        # has been created. 'numBuckets' defines the number of bins that the
        # state key-values are to be divided
        numBuckets: {{core_ledger_state_dataStructure_configs_numBuckets}}
        # 'maxGroupingAtEachLevel' defines the number of bins that are grouped
        #together to construct next level of the merkle-tree (this is applied
        # repeatedly for constructing the entire tree).
        maxGroupingAtEachLevel: {{core_ledger_state_dataStructure_configs_maxGroupingAtEachLevel}}
        # 'bucketCacheSize' defines the size (in MBs) of the cache that is used to keep
        # the buckets (from root upto secondlast level) in memory. This cache helps
        # in making state hash computation faster. A value less than or equals to zero
        # leads to disabling this caching. This caching helps more if transactions
        # perform significant writes.
        bucketCacheSize: {{core_ledger_state_dataStructure_configs_bucketCacheSize}}

        # configurations for 'trie'
        # 'tire' has no additional configurations exposed as yet


###############################################################################
#
#    Security section - Applied to all entities (client, NVP, VP)
#
###############################################################################
security:
    # Enable security will force every entity on the network to enroll with obc-ca
    # and maintain a valid set of certificates in order to communicate with
    # other peers
    enabled: {{core_security_enabled}}
    # To enroll NVP or VP with membersrvc. These parameters are for 1 time use.
    # They will not be valid on subsequent times without un-enroll first.
    # The values come from off-line registration with obc-ca. For testing, make
    # sure the values are in membersrvc/membersrvc.yaml file eca.users
    enrollID: {{core_security_enrollID}}
    enrollSecret: {{core_security_enrollSecret}}
    # To enable privacy of transactions (requires security to be enabled). This
    # encrypts the transaction content during transit and at rest. The state
    # data is also encrypted
    privacy: {{core_security_privacy}}

    # Can be 256 or 384. If you change here, you have to change also
    # the same property in membersrvc.yaml to the same value
    level: {{core_security_level}}

    # Can be SHA2 or SHA3. If you change here, you have to change also
    # the same property in membersrvc.yaml to the same value
    hashAlgorithm: {{core_security_hashAlgorithm}}

    # TCerts related configuration
    tcert:
      batch:
        # The size of the batch of TCerts
        size:  {{core_security_tcert_btach_size}}
    # Enable the release of keys needed to decrypt attributes from TCerts in
    # the chaincode using the metadata field of the transaction (requires
    # security to be enabled).
    attributes:
      enabled: {{core_security_attributes_enabled}}
    multithreading:
      enabled: {{core_security_multithreading_enabled}}

    # Confidentiality protocol versions supported: 1.2
    confidentialityProtocolVersion: {{core_security_confidentialityProtocolVersion}}

################################################################################
#
#   SECTION: STATETRANSFER
#
#   - This applies to recovery behavior when the replica has detected
#     a state transfer is required
#
#   - This might happen:
#     - During a view change in response to a faulty primary
#     - After a network outage which has isolated the replica
#     - If the current blockchain/state is determined to be corrupt
#
################################################################################
statetransfer:

    # Should a replica attempt to fix damaged blocks?
    # In general, this should be set to true, setting to false will cause
    # the replica to panic, and require a human's intervention to intervene
    # and fix the corruption
    recoverdamage: {{core_statetransfer_recoverdamage}}

    # The number of blocks to retrieve per sync request
    blocksperrequest: {{core_statetransfer_blocksperrequest}}

    # The maximum number of state deltas to attempt to retrieve
    # If more than this number of deltas is required to play the state up to date
    # then instead the state will be flagged as invalid, and a full copy of the state
    # will be retrieved instead
    maxdeltas: {{core_statetransfer_maxdeltas}}

    # Timeouts
    timeout:

        # How long may returning a single block take
        singleblock: {{core_statetransfer_timeout_singleblock}}

        # How long may returning a single state delta take
        singlestatedelta: {{core_statetransfer_timeout_singlestatedelta}}

        # How long may transferring the complete state take
        fullstate: {{core_statetransfer_timeout_fullstate}}
